import { useState, useEffect } from "react";
import useValidareOrar from "./useValidareOrar";

const useOrarGenerator = (
  nivelSelectat,
  anSelectat,
  setOrar,
  setRaportValidare,
  regula_id,
  continutRegula,
  setEsteOrarSalvat
) => {
  const [profesori, setProfesori] = useState([]);
  const [sali, setSali] = useState([]);
  const [grupe, setGrupe] = useState([]);
  const [reguli, setReguli] = useState("");
  const [loadingGPT, setLoadingGPT] = useState(false);
  const [loadingClasic, setLoadingClasic] = useState(false);
  const [generatClasicUltimul, setGeneratClasicUltimul] = useState(false);

const { valideazaOrarGenerat } = useValidareOrar(
  nivelSelectat,
  anSelectat,
  grupe,
  setRaportValidare
);


  // √éncarcƒÉ toate datele ini»õiale
  useEffect(() => {
    const incarcaDate = async () => {
      try {
        const res = await fetch("http://localhost:5000/date_orar");
        const data = await res.json();

        const discipline = data.discipline || [];

        const profesoriCuDiscipline = (data.profesori || []).map((prof) => {
        const disciplineProf = discipline
          .filter((d) => d.profesor_id === prof.id)
          .map((d) => `${d.denumire} (${d.nivel}, ${d.tip})`);

        const disponibilitateParsed = (() => {
          try {
            return typeof prof.disponibilitate === "string"
              ? JSON.parse(prof.disponibilitate)
              : prof.disponibilitate;
          } catch {
            return {};
          }
        })();

        return {
          ...prof,
          discipline: disciplineProf,
          disponibilitate: disponibilitateParsed
        };
      });


        setProfesori(profesoriCuDiscipline);
        setSali(data.sali || []);
        setGrupe(data.grupe || []);
        setReguli(data.reguli?.continut || "");
      } catch (err) {
        console.error("Eroare la √ÆncƒÉrcarea datelor:", err);
      }
    };

    incarcaDate();
  }, []);
  

  const genereazaOrar = async () => {
    setLoadingGPT(true);
    setGeneratClasicUltimul(false);
    setLoadingClasic(false);


const instructiuniProfesori = profesori.map((p) => {
  const discipline = Array.isArray(p.discipline) && p.discipline.length > 0
    ? p.discipline.join(", ")
    : "fƒÉrƒÉ discipline";

  return `- ${p.nume} (${discipline})`;
}).join("\n");


const instructiuniSali = `

Folose»ôte EXCLUSIV codurile de sƒÉli de mai jos. NU inventa denumiri, NU modifica formatul!

${sali.map((s) => `- ${s.cod} (${s.tip})`).join("\n")}

‚ÄºÔ∏è IMPORTANT:
- NU este permis sƒÉ folose»ôti alt cod de salƒÉ dec√¢t cele din listƒÉ.
- NU folosi coduri generice (ex: A1, Sala 1, etc.) ‚Äì sunt interzise!
- √én orar trebuie sƒÉ aparƒÉ DOAR codurile exacte (ex: GC1, GS2, GL3).
`.trim();


const instructiuniGrupe = grupe
  .filter(
    (gr) =>
      gr.nivel === nivelSelectat &&
      gr.an === anSelectat
  )
  .map(
    (gr) =>
      `- ${gr.denumire} (${gr.nivel}, anul ${gr.an}, grupa ${gr.grupa}, subgrupa ${gr.subgrupa})`
  )
  .join("\n");


const instructiuniGPT = `
üîí REGULI GPT PENTRU GENERAREA ORARULUI:
DacƒÉ √Æn orar gƒÉse»ôti cƒÉ acela»ôi seminar sau proiect apare √Æn ore diferite pentru grupe, corecteazƒÉ automat pentru a le sincroniza pe toate grupele √Æn acela»ôi interval, aceea»ôi salƒÉ, acela»ôi profesor.
Laboratoarele trebuie sƒÉ fie √Æn intervale orare diferite pentru fiecare subgrupƒÉ, NU le suprapune, sƒÉ aibƒÉ orƒÉ »ôi salƒÉ diferite.

üìå Structura generalƒÉ:
- NU include chei globale precum "luni", "marti" etc.
- Toate activitƒÉ»õile trebuie plasate DOAR √Æn interiorul grupelor/subgrupelor, sub cheile "Licenta" »ôi "Master".
- Grupele sunt  formatul  LI1a + LI1b + LI1c etc. pentru Licen»õƒÉ »ôi MA1a + MA1b etc. pentru Master.
- Subgrupelor sunt LI1a1 sau LI1a2 etc. pentru Licen»õƒÉ »ôi MA1a1, MA1a2 etc. pentru Master.
- Formatul JSON trebuie sƒÉ respecte modelul de mai jos (NU folosi array-uri, fiecare interval este un obiect):

{
  "Licenta": {
    "LI1a": {
      "Luni": {
        "08:00‚Äì10:00": {
          "activitate": "Algoritmi (AL)",
          "tip": "Curs",
          "profesor": "Maria Ionescu",
          "sala": "GC1"
        }
      }
    }
  }
}
---


‚úèÔ∏è FORMAT DENUMIRI ACTIVITƒÇ»öI:
- La toate **cursurile (C)** se scrie denumirea completƒÉ a disciplinei + tipul (ex: "Programare OrientatƒÉ pe Obiect (C)").
- La toate **seminarele, proiectele »ôi laboratoarele** se scrie DOAR prescurtarea disciplinei + tipul (ex: "POO").
- NU scrie denumirea completƒÉ la activitƒÉ»õile practice.
- NU inversa aceste formate! Este obligatoriu.


üìö 1. **CURSURI (pe AN)**
- Cursurile se organizeazƒÉ O SINGURƒÇ DATƒÇ pentru √Æntregul AN (ex: LI2a, LI2b, LI2c).
- Toate grupele din acela»ôi an trebuie sƒÉ aibƒÉ cursul √Æn ACELA»òI MOMENT.
- Trebuie sƒÉ aparƒÉ:
  ‚úÖ √Æn ACEEA»òI ZI,  
  ‚úÖ √Æn ACELA»òI INTERVAL ORAR,  
  ‚úÖ √Æn ACEEA»òI SALƒÇ,  
  ‚úÖ cu ACELA»òI PROFESOR  
  √Æn toate grupele acelui an.
- NU genera cursuri individuale per grupƒÉ!
- Se folosesc exclusiv sƒÉli cu prefix **GC**.
- NU omite nicio grupƒÉ din an: toate trebuie sƒÉ aibƒÉ TOATE cursurile comune.

üß© 2. **SEMINARE & PROIECTE (pe GRUPƒÇ)**
- Se organizeazƒÉ individual pentru fiecare grupƒÉ (ex: LI1a, LI1b).
- NU este permisƒÉ suprapunerea √Æn acela»ôi interval pentru activitƒÉ»õi cu acela»ôi profesor.
- Fiecare activitate are:
  ‚úÖ o zi,  
  ‚úÖ un interval orar,  
  ‚úÖ o salƒÉ.
- Seminare ‚Üí prefix **GS**
- Proiecte ‚Üí prefix **GP**

üß™ 3. **LABORATOARE (pe SUBGRUPƒÇ)**
- Fiecare subgrupƒÉ are laboratorul propriu.
- Laboratoarele NU trebuie sƒÉ fie √Æn acela»ôi interval orar pentru subgrupe diferite.
- Se recomandƒÉ folosirea de sƒÉli diferite.
- Prefix salƒÉ: **GL**
- NU este permisƒÉ suprapunerea dacƒÉ au acela»ôi profesor sau salƒÉ.

üèõÔ∏è 4. **REGULI PENTRU SƒÇLI**
- O salƒÉ NU poate fi folositƒÉ simultan de mai multe activitƒÉ»õi (nici mƒÉcar la niveluri diferite).
- SƒÉlile NU se √Æmpart √Æntre licen»õƒÉ »ôi master √Æn acela»ôi interval.
- Prefixe:
  - GC ‚Üí Curs
  - GS ‚Üí Seminar
  - GP ‚Üí Proiect
  - GL ‚Üí Laborator

‚ö†Ô∏è 5. **OBLIGA»öII FINALE**
- Fiecare grupƒÉ/subgrupƒÉ trebuie sƒÉ aibƒÉ:
  ‚úÖ Toate Cursurile cu anul  
  ‚úÖ Toate Seminariile cu grupa  
  ‚úÖ Toate Proiectele cu grupa 
  ‚úÖ Laboratorele cu subgrupa(de exemplu, LI1a, LI1b, LI1c, sa aiba laboratoarele la ore diferite)
- Distribuie activitƒÉ»õile uniform pe parcursul sƒÉptƒÉm√¢nii (Luni‚ÄìVineri).
- RespectƒÉ regula de 4‚Äì8 ore/zi pentru fiecare grupƒÉ.
- Grupele pot avea un numƒÉr diferit de activitƒÉ»õi zilnice.
- NU lƒÉsa zile fƒÉrƒÉ activitƒÉ»õi pentru grupe/subgrupe.
`.trim();

const promptFinal = `


üîí GENEREAZƒÇ DOAR PENTRU NIVELUL: **${nivelSelectat}**, anul: **${anSelectat}**.
‚ÄºÔ∏è NU include date din alt nivel. DacƒÉ este Master, NU include Licen»õƒÉ.

‚ÄºÔ∏è IMPORTANT:
- Cursurile trebuie sƒÉ fie IDENTICE (zi, orƒÉ, salƒÉ, profesor) pentru TOATE grupele din acela»ôi an.  
- Seminarele »ôi proiectele trebuie sƒÉ fie planificate SEPARAT pentru fiecare GRUPƒÇ.  
- Laboratoarele trebuie sƒÉ fie planificate SEPARAT pentru fiecare SUBGRUPƒÇ, √Æn intervale diferite.  



‚úÖ LISTA COMPLETƒÇ de profesori »ôi discipline (nu inventa altele):
${instructiuniProfesori}

üè´ SƒÉli disponibile:
${instructiuniSali}
üö´ NU este permis sƒÉ generezi sƒÉli fictive (ex: M101, A2, B5).
‚úÖ Folose»ôte DOAR codurile de sƒÉli din lista transmisƒÉ. FƒÉrƒÉ excep»õii.

üë• Grupe selectate (${nivelSelectat}, anul ${anSelectat}):
${instructiuniGrupe}


üîí INSTRUC»öIUNI STRICTE PENTRU GPT ‚Äì FORMAT »òI RESTRIC»öII:
${instructiuniGPT}

Regula ID: ${regula_id || "N/A"}

üìú Con»õinutul regulii:
${continutRegula || "Nicio regulƒÉ definitƒÉ"}




`;
console.log("üéØ PROMPT GPT:\n", promptFinal);

try {
  const response = await fetch("http://127.0.0.1:5000/genereaza_orar", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
  regula_id: regula_id,
  an_selectat: anSelectat,
  nivel_selectat: nivelSelectat,
  grupe_selectate: grupe
    .filter(g => g.an === anSelectat && g.nivel === nivelSelectat)
    .map(g => g.denumire),
    prompt: promptFinal
}),

  });

  const data = await response.json();

  try {
    // Validare JSON (op»õionalƒÉ)
    JSON.stringify(data);
    setOrar(data);
    valideazaOrarGenerat(data);

    //setEsteOrarSalvat(false); // üëà dezactiveazƒÉ indicatorul

    // SalveazƒÉ automat √Æn baza de date
try {
  await fetch("http://127.0.0.1:5000/salveaza_orar", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      nivel: nivelSelectat,
      an: anSelectat,
      orar: data,
      
    })
  });
} catch (err) {
  console.error("Eroare la salvarea orarului:", err);
}

  } catch (err) {
    console.error("RƒÉspunsul nu este JSON valid:", err);
  }

} catch (error) {
  console.error("Eroare la generare orar:", error);
}

    setLoadingGPT(false);
  };

const genereazaOrarClasic = async () => {
  setGeneratClasicUltimul(true);
  setLoadingClasic(true);
  try {
    const response = await fetch("http://127.0.0.1:5000/genereaza_algoritm_propriu", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        nivel_selectat: nivelSelectat,
        an_selectat: anSelectat,
        grupe_selectate: grupe
          .filter((g) => g.nivel === nivelSelectat && String(g.an) === String(anSelectat))
          .map((g) => g.denumire)

      }),
    });

    const data = await response.json();

    if (data.orar) {
      setOrar(data.orar);
      valideazaOrarGenerat(data.orar);

      await fetch("http://127.0.0.1:5000/salveaza_orar", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          nivel: nivelSelectat,
          an: anSelectat,
          orar: data.orar,
        }),
      });
    } else {
      console.error("‚ö†Ô∏è RƒÉspunsul nu con»õine c√¢mpul 'orar'");
    }
  } catch (error) {
    console.error("Eroare la generare clasicƒÉ:", error);
  }

  setLoadingClasic(false);
};




  return {
    profesori,
    sali,
    grupe,
    reguli,
    loadingGPT,
    loadingClasic,
    genereazaOrar,
    genereazaOrarClasic,
    generatClasicUltimul,
    setGeneratClasicUltimul
  };
};

export default useOrarGenerator;
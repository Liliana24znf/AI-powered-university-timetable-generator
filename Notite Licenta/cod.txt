<div className="d-flex flex-wrap gap-4">
  {/* Col stângă: formularul */}
  <div className="bg-white p-4 shadow-sm rounded" style={{ flex: "1 1 400px" }}>
  <h4 className="mb-4 text-primary fw-bold">
    {profesorEditat ? "🔁 Modifică profesorul existent" : "👨‍🏫 Adaugă un nou profesor"}
  </h4>

  {/* Nume complet */}
  <div className="mb-3">
    <label className="form-label fw-semibold">👤 Nume complet:</label>
    <input
      type="text"
      className={`form-control ${isInvalid(formular.nume) ? "is-invalid" : ""}`}
      value={formular.nume}
      onChange={(e) => handleFormChange("nume", e.target.value)}
      placeholder="ex: Dr. Andrei Popescu"
    />
  </div>

  {/* Nivel de studiu */}
  <div className="mb-3">
    <label className="form-label fw-semibold">🎓 Nivel predare:</label>
    <div className="d-flex gap-3">
      {["Licenta", "Master"].map(nivel => (
        <div key={nivel} className="form-check">
          <input
            type="checkbox"
            className="form-check-input"
            checked={formular.niveluri.includes(nivel)}
            onChange={() => toggleNivel(nivel)}
            id={`nivel-${nivel}`}
          />
          <label className="form-check-label" htmlFor={`nivel-${nivel}`}>{nivel}</label>
        </div>
      ))}
    </div>
  </div>

  {/* Tipuri activități */}
  <div className="mb-3">
    <label className="form-label fw-semibold">📚 Tipuri de activitate:</label>
    <div className="d-flex gap-3 flex-wrap">
      {["Curs", "Seminar", "Laborator"].map(tip => (
        <div key={tip} className="form-check">
          <input
            type="checkbox"
            className="form-check-input"
            checked={formular.tipuri.includes(tip)}
            onChange={() => toggleTipActivitate(tip)}
            id={`tip-${tip}`}
          />
          <label className="form-check-label" htmlFor={`tip-${tip}`}>{tip}</label>
        </div>
      ))}
    </div>
  </div>

  {/* Discipline predate */}
  <div className="mb-3">
    <label className="form-label fw-semibold">📘 Discipline predate:</label>
    {formular.discipline.map((disc, i) => (
      <div key={i} className="input-group mb-2">
        <input
          type="text"
          className={`form-control ${isInvalid(disc) ? "is-invalid" : ""}`}
          value={disc}
          onChange={(e) => handleDisciplinaChange(i, e.target.value)}
          placeholder={`Disciplină #${i + 1}`}
        />
        {i > 0 && (
          <button
            type="button"
            className="btn btn-outline-danger"
            onClick={() => stergeDisciplina(i)}
            title="Șterge disciplina"
          >
            🗑️
          </button>
        )}
      </div>
    ))}
    <button className="btn btn-sm btn-outline-primary mt-2" onClick={adaugaDisciplina}>
      ➕ Adaugă altă disciplină
    </button>
  </div>
<div className="mb-4">

            
<label className="form-label fw-bold">📅 Disponibilitate săptămânală</label>
<p className="text-muted mb-3">
  Selectează zilele și intervalele orare în care profesorul este disponibil.
  Click pe o celulă pentru a o activa/dezactiva.
</p>

<div className="table-responsive">
  <table className="table table-bordered text-center align-middle shadow-sm">
    <thead className="table-primary">
      <tr>
        <th className="bg-light">🕓 Zile / Interval</th>
        {["08:00-10:00", "10:00-12:00", "12:00-14:00", "14:00-16:00", "16:00-18:00", "18:00-20:00"].map(interval => (
          <th key={interval} className="small">{interval}</th>
        ))}
      </tr>
    </thead>
    <tbody>
      {["Luni", "Marti", "Miercuri", "Joi", "Vineri"].map(zi => (
        <tr key={zi}>
          <td className="fw-semibold bg-light">{zi}</td>
          {["08:00-10:00", "10:00-12:00", "12:00-14:00", "14:00-16:00", "16:00-18:00", "18:00-20:00"].map(interval => {
            const esteSelectat = formular.disponibilitate[zi]?.includes(interval);
            return (
              <td
                key={interval}
                className={`cursor-pointer ${esteSelectat ? 'bg-success text-white fw-bold' : 'bg-white'} hover-shadow`}
                style={{ transition: "0.2s", userSelect: "none" }}
                onClick={() => {
                  const curente = formular.disponibilitate[zi] || [];
                  const actualizat = curente.includes(interval)
                    ? curente.filter(i => i !== interval)
                    : [...curente, interval];
                  setFormular({
                    ...formular,
                    disponibilitate: {
                      ...formular.disponibilitate,
                      [zi]: actualizat
                    }
                  });
                }}
              >
                {esteSelectat ? "✔️" : ""}
              </td>
            );
          })}
        </tr>
      ))}
    </tbody>
  </table>
</div>
</div>

          <div className="d-flex justify-content-between">
            {profesorEditat ? (
              <>
                <button className="btn btn-warning" onClick={actualizeazaProfesor} disabled={loading}>
                  {loading ? "Actualizare..." : "🔁 Actualizează"}
                </button>
                <button className="btn btn-outline-secondary" onClick={resetFormular}>❌ Anulează</button>
              </>
            ) : (
              <>
                <button className="btn btn-success" onClick={adaugaProfesor} disabled={loading}>
                  {loading ? "Salvare..." : "✅ Salvează profesor"}
                </button>
                <button className="btn btn-outline-secondary" onClick={resetFormular}>🔄 Resetare</button>
              </>
            )}
          </div>  



 </div>

  {/* Col dreaptă: disponibilitatea */}
  <div className="bg-white p-4 shadow-sm rounded" style={{ flex: "1 1 600px", minWidth: "350px" }}>
    <label className="form-label fw-bold">📅 Disponibilitate săptămânală</label>
    <p className="text-muted mb-3">
      Selectează zilele și intervalele orare în care profesorul este disponibil.<br />
      Click pe o celulă pentru a o activa/dezactiva.
    </p>

    <div className="table-responsive">
      <table className="table table-bordered text-center align-middle shadow-sm">
        <thead className="table-primary">
          <tr>
            <th className="bg-light">🕓 Zile / Interval</th>
            {["08:00-10:00", "10:00-12:00", "12:00-14:00", "14:00-16:00", "16:00-18:00", "18:00-20:00"].map(interval => (
              <th key={interval} className="small">{interval}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {["Luni", "Marti", "Miercuri", "Joi", "Vineri"].map(zi => (
            <tr key={zi}>
              <td className="fw-semibold bg-light">{zi}</td>
              {["08:00-10:00", "10:00-12:00", "12:00-14:00", "14:00-16:00", "16:00-18:00", "18:00-20:00"].map(interval => {
                const esteSelectat = formular.disponibilitate[zi]?.includes(interval);
                return (
                  <td
                    key={interval}
                    className={`cursor-pointer ${esteSelectat ? 'bg-success text-white fw-bold' : 'bg-white'} hover-shadow`}
                    style={{ transition: "0.2s", userSelect: "none" }}
                    onClick={() => {
                      const curente = formular.disponibilitate[zi] || [];
                      const actualizat = curente.includes(interval)
                        ? curente.filter(i => i !== interval)
                        : [...curente, interval];
                      setFormular({
                        ...formular,
                        disponibilitate: {
                          ...formular.disponibilitate,
                          [zi]: actualizat
                        }
                      });
                    }}
                  >
                    {esteSelectat ? "✔️" : ""}
                  </td>
                );
              })}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</div>
